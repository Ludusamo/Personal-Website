public NameRecord(String line) {
    String[] data = line.split(" ");
    this.name = data[0];
    this.rankings = new int[DECADES];    
    for (int i = 0; i < DECADES; i++) {
        this.rankings[i] = Integer.parseInt(data[i + 1]);
    }
}

int bestYear() {
    int best = -1;
    int bestDecade = 0;
    for (int i = 0; i < DECADES; i++) {
        if (rankings[i] != 0 && (best == -1 || rankings[i] < best)) {
            best = rankings[i];
            bestDecade = i;        
        }
    }
    return bestDecade * 10 + START;
}

void plot() {
    StdDraw.setCanvasSize(1200, 900);
    StdDraw.setPenRadius(0.05);
    StdDraw.setPenColor(StdDraw.BLUE);
    int prevX = 0;
    double prevY = 900 - (900 * (rankings[0] / 1100));
    for (int x = 1; x < DECADES; x++) {
        if (rankings[i] == 0) continue;        
        double y = 900 - (900 * (rankings[i] / 1100));
        StdDraw.line((double) prevX, prevY, (double) x, y);
        prevX = x;
        prevY = y;
    }
}

public class NameSurfer {
    public static void printMenu() {
        System.out.println("1 - Find best year for a name");
        System.out.println("2 - Find best rank for a name");
        System.out.println("3 - Plot popularity of a name");
        System.out.println("4 - Clear plot");
        System.out.println("5 - Quit");
        System.out.println("Enter your selection.");
    }
    public static void main(String[] args) {
        Boolean running = true;
        File file = new File("10_Random");
        Scanner fileReader = new Scanner(file);
        ArrayList<NameRecord> records = new ArrayList<NameRecord>();        
        while (fileReader.hasNextLine()) {
            records.add(new NameRecord(sc.nextLine()));
        }

        Scanner scanner = new Scanner(System.in);        
        while (running) {
            printMenu();
            int i = scanner.nextInt();
            String name = scanner.next();            
            for (int i = 0; i < records.size(); i++) {
                if (records[i].getName() == name) {
                    switch (i) {
                    case 1:
                        System.out.println(records[i].bestYear());
                        break;
                    case 2:
                        System.out.println(records[i].bestRank(records[i].bestYear() - 1900));
                        break;
                    case 3:
                        records[i].plot();
                        break;
                    case 4:
                        StdDraw.clear();
                    case 5:
                        running = false;                        
                    }
                    break;
                } else {
                    if (i == records.size() - 1) {
                        System.out.println("Error: Invalid name");
                    }
                }
            }                                
        }
    }
}
